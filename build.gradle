plugins {
    id "application"
    id "checkstyle"
    id "codenarc"
    id "com.adarshr.test-logger" version "3.2.0"
    id "com.diffplug.spotless" version "6.6.1"
    id "groovy"
    id "io.freefair.lombok" version "6.4.3"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id "it.nicolasfarabegoli.conventional-commits" version "2.0.0"
    id "java"
    id "maven-publish"
    id "net.ltgt.errorprone" version "2.0.2"
    id "org.owasp.dependencycheck" version "7.1.0.1"
    id "org.sonarqube" version "3.3"
    id "org.springframework.boot" version "2.6.7"
    id "pl.allegro.tech.build.axion-release" version "1.13.6"
    id "pmd"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withSourcesJar()
}

group = "com.github.marcindabrowski.example"
version = scmVersion.version

sourceSets {
    integration {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    integrationImplementation.extendsFrom testImplementation
    integrationRuntimeOnly.extendsFrom testRuntime
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        // Complete list of spring-boot dependencies:
        // https://github.com/spring-projects/spring-boot/blob/v2.6.7/spring-boot-project/spring-boot-dependencies/build.gradle
        mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
    }
}

ext {
    checkstyleToolVersion = "10.1"
    codenarcToolVersion = "3.0.0"
    googleJavaFormatVersion = "1.15.0"
    pmdToolVersion = "6.44.0"
    spockVersion = "2.1-groovy-3.0"
}

dependencies {
    errorprone "com.google.errorprone:error_prone_core:2.13.1"

    implementation "org.springframework.boot:spring-boot-starter-web"

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    developmentOnly "org.springframework.boot:spring-boot-devtools"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation group: "org.spockframework", name: "spock-core", version: spockVersion
    testImplementation group: "org.spockframework", name: "spock-spring", version: spockVersion

    integrationImplementation "org.springframework.boot:spring-boot-starter-test"
    integrationImplementation group: "org.spockframework", name: "spock-spring", version: spockVersion
    integrationImplementation "org.springframework:spring-test"
}

configurations.all {
    resolutionStrategy {
        force "commons-io:commons-io:2.11.0" // because "Versions 2.2 used by pmd plugin have known vulnerability CVE-2021-29425"
    }
}

task unitTest(type: Test) {
    group = "Verification"
    description = "Runs the unit tests."
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
}

task integrationTest(type: Test) {
    group = "Verification"
    description = "Runs the integration tests."
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
    shouldRunAfter "unitTest"
}

tasks.named("test") {
    it.group = "Verification"
    it.description = "Runs the unit and the integration tests."

    it.dependsOn unitTest, integrationTest

    // test task should only bring its task dependencies to the execution graph but not run itself
    it.enabled = false
}

tasks.withType(Test).configureEach { testTask ->
    testTask.configure {
        useJUnitPlatform()
        afterSuite { desc, result ->
            if (!desc.parent) {
                if (result.testCount == 0) {
                    throw new IllegalStateException("No tests were found. Failing the build")
                }
            }
        }
    }
}

check.dependsOn unitTest, integrationTest

application {
    mainClass = "com.github.marcindabrowski.example.roomsbooking.RoomsBookingApplication"
}

checkstyle {
    toolVersion = checkstyleToolVersion
    configFile = file("config/checkstyle/google_aop_checks.xml")
}

codenarc {
    toolVersion = codenarcToolVersion
    reportFormat = "console"
    configFile = rootProject.file("config/codenarc/CodenarcRuleSet.groovy")
}

dependencyCheck {
    analyzers {
        assemblyEnabled = false
        nodeEnabled = false
        nuspecEnabled = false
        msbuildEnabled = false
    }
}

jar {
    manifest {
        attributes(
                "Build-Jdk"              : "${System.properties["java.version"]} (${System.properties["java.vendor"]} ${System.properties["java.vm.version"]})",
                "Build-Jdk-Spec"         : System.properties["java.specification.version"],
                "Build-OS"               : "${System.properties["os.name"]} ${System.properties["os.arch"]} ${System.properties["os.version"]}",
                "Build-Timestamp"        : java.time.Instant.now().toString(),
                "Created-By"             : "Gradle ${gradle.gradleVersion}",
                "Implementation-Title"   : project.name,
                "Implementation-URL"     : "https://github.com/marcindabrowski/examples-rooms-booking",
                "Implementation-Vendor"  : "Marcin Dąbrowski",
                "Implementation-Version" : scmVersion.version,
                "X-Compile-Source-JDK"   : tasks.compileJava.sourceCompatibility,
                "X-Compile-Target-JDK"   : tasks.compileJava.targetCompatibility,
        )
    }
}

pmd {
    toolVersion = pmdToolVersion
    consoleOutput = true
    ignoreFailures = false
    ruleSets = ["category/java/bestpractices.xml",
                "category/java/errorprone.xml",
                "category/java/performance.xml",
                "category/java/security.xml"]
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact source: bootJar
            artifact source: sourcesJar, classifier: "sources"

            pom {
                name = "Example rooms booking system"
                description = "Service with example REST API for room booking system."
                url = "https://github.com/marcindabrowski/examples-rooms-booking"

                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "https://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "Marcin"
                        name = "Dąbrowski"
                        timezone = "Europe/Warsaw"
                    }
                }
                scm {
                    connection = "scm:git:git@github.com:marcindabrowski/examples-rooms-booking.git"
                    developerConnection = "scm:git:git@github.com:marcindabrowski/examples-rooms-booking.git"
                    url = "https://github.com/marcindabrowski/examples-rooms-booking"
                }
            }
        }
    }
    repositories {
        maven {
            name = "ProjectGitHubPackages"
            url = "https://maven.pkg.github.com/marcindabrowski/examples-rooms-booking"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "marcindabrowski_examples-rooms-booking"
        property "sonar.organization", "marcindabrowski"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

spotless {
    java {
        googleJavaFormat(googleJavaFormatVersion).aosp().reflowLongStrings()
    }
    freshmark {
        target "*.md"
    }
}
