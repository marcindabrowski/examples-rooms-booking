plugins {
    id "application"
    id "checkstyle"
    id "codenarc"
    id "groovy"
    id "jacoco"
    id "java"
    id "maven-publish"
    id "pmd"

    alias(libs.plugins.dependencyCheck)
    alias(libs.plugins.dependencyUpdates)
    alias(libs.plugins.errorprone)
    alias(libs.plugins.lombok)
    alias(libs.plugins.release)
    alias(libs.plugins.sonarqube)
    alias(libs.plugins.spotless)
    alias(libs.plugins.spring.boot)
    alias(libs.plugins.spring.dependencyManagement)
    alias(libs.plugins.testLogger)
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withSourcesJar()
}

group = "com.github.marcindabrowski.example"
version = scmVersion.version

sourceSets {
    integration {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    integrationImplementation.extendsFrom testImplementation
    integrationRuntimeOnly.extendsFrom testRuntime
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        // Complete list of spring-boot dependencies:
        // https://github.com/spring-projects/spring-boot/blob/v2.7.9/spring-boot-project/spring-boot-dependencies/build.gradle
        mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
    }
}

dependencies {
    errorprone libs.errorprone.core

    annotationProcessor libs.spring.boot.configurationProcessor

    implementation(libs.spring.boot.starter.undertow) {
        exclude group: "io.undertow", module: "undertow-websockets-jsr"
        because "We are not using WebSockets"
    }
    implementation(libs.spring.boot.starter.web) {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
        because "We are using Undertow"
    }

    developmentOnly libs.spring.boot.devtools

    testImplementation platform(libs.test.junit.platform)
    testImplementation platform(libs.groovy.platform)
    testImplementation libs.spring.boot.starter.test
    testImplementation libs.test.spock.core

    integrationImplementation libs.test.spock.spring
}

configurations.configureEach {
    resolutionStrategy {
        force libs.apache.commons.io // because "Versions 2.2 used by pmd plugin have known vulnerability CVE-2021-29425"
    }
}

tasks.register("unitTest", Test) {
    group = "Verification"
    description = "Runs the unit tests."
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
}

tasks.register("integrationTest", Test) {
    group = "Verification"
    description = "Runs the integration tests."
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
    shouldRunAfter "unitTest"
}

tasks.named("test") {
    it.group = "Verification"
    it.description = "Runs the unit and the integration tests."

    it.dependsOn unitTest, integrationTest

    // test task should only bring its task dependencies to the execution graph but not run itself
    it.enabled = false
}

tasks.withType(Test).configureEach { testTask ->
    testTask.configure {
        useJUnitPlatform()
        afterSuite { desc, result ->
            if (!desc.parent) {
                if (result.testCount == 0) {
                    throw new IllegalStateException("No tests were found. Failing the build")
                }
            }
        }
    }
}

check.dependsOn unitTest, integrationTest

application {
    mainClass = "com.github.marcindabrowski.example.roomsbooking.RoomsBookingApplication"
}

checkstyle {
    toolVersion = libs.versions.checkstyle.get()
    configFile = file("config/checkstyle/google_checks.xml")
}

codenarc {
    toolVersion = libs.versions.codenarc.get()
    reportFormat = "console"
    configFile = rootProject.file("config/codenarc/CodenarcRuleSet.groovy")
}

tasks.named("dependencyUpdates").configure {
    analyzers {
        assemblyEnabled = false
        nodeEnabled = false
        nuspecEnabled = false
        msbuildEnabled = false
    }
}

jar {
    manifest {
        attributes(
                "Build-Jdk"              : "${System.properties["java.version"]} (${System.properties["java.vendor"]} ${System.properties["java.vm.version"]})",
                "Build-Jdk-Spec"         : System.properties["java.specification.version"],
                "Build-OS"               : "${System.properties["os.name"]} ${System.properties["os.arch"]} ${System.properties["os.version"]}",
                "Build-Timestamp"        : java.time.Instant.now().toString(),
                "Created-By"             : "Gradle ${gradle.gradleVersion}",
                "Implementation-Title"   : project.name,
                "Implementation-URL"     : "https://github.com/marcindabrowski/examples-rooms-booking",
                "Implementation-Vendor"  : "Marcin Dąbrowski",
                "Implementation-Version" : scmVersion.version,
                "X-Compile-Source-JDK"   : tasks.compileJava.sourceCompatibility,
                "X-Compile-Target-JDK"   : tasks.compileJava.targetCompatibility,
        )
    }
}

jacoco {
    toolVersion = libs.versions.jacoco.get()
}

jacocoTestReport {
    dependsOn test
    reports {
        csv.required = false
        html.required = false
        xml.required = true
    }
}

pmd {
    toolVersion = libs.versions.pmd.get()
    consoleOutput = true
    ignoreFailures = false
    ruleSets = ["category/java/bestpractices.xml",
                "category/java/errorprone.xml",
                "category/java/performance.xml",
                "category/java/security.xml"]
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact source: bootJar
            artifact source: sourcesJar, classifier: "sources"

            pom {
                name = "Example rooms booking system"
                description = "Service with example REST API for room booking system."
                url = "https://github.com/marcindabrowski/examples-rooms-booking"

                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "https://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "Marcin"
                        name = "Dąbrowski"
                        timezone = "Europe/Warsaw"
                    }
                }
                scm {
                    connection = "scm:git:git@github.com:marcindabrowski/examples-rooms-booking.git"
                    developerConnection = "scm:git:git@github.com:marcindabrowski/examples-rooms-booking.git"
                    url = "https://github.com/marcindabrowski/examples-rooms-booking"
                }
            }
        }
    }
    repositories {
        maven {
            name = "ProjectGitHubPackages"
            url = "https://maven.pkg.github.com/marcindabrowski/examples-rooms-booking"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "marcindabrowski_examples-rooms-booking"
        property "sonar.organization", "marcindabrowski"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

spotless {
    java {
        googleJavaFormat(libs.versions.google.java.format.get()).reflowLongStrings()
        targetExclude("build/generated/", "src/generated/")
    }
    freshmark {
        target "*.md"
    }
}
